if not game:IsLoaded() then
    game.Loaded:Wait()
end

local PetCatchersHub = {}
local DestroyButton
local DestroyScript = false
local HasInitialized = false

-- Settings and default configurations
local Settings = {
    Toggles = {
        ScriptEnabled = true, -- Toggle for enabling/disabling the script
        RespawnKrakenInterval = false, -- Toggle for Kraken respawn interval
        RespawnSlimeInterval = false, -- Toggle for Slime respawn interval
        RespawnKraken = false, -- Toggle for Kraken respawn
        RespawnSlime = false, -- Toggle for Slime respawn
        StartKraken = false, -- Toggle for starting Kraken fight
        StartSlime = false, -- Toggle for starting Slime fight
        BuyBlackMarket = false, -- Toggle for Black Market auto buy
        BuyGemTrader = false, -- Toggle for Gem Trader auto buy
        BuyAuburnShop = false, -- Toggle for Auburn Shop auto buy
        BuyMagicShop = false, -- Toggle for Magic Shop auto buy
        UseAllShrines = false -- Toggle for using all shrines
    },
    Timers = {
        RespawnKrakenInterval = 1, -- Kraken Auto Respawn interval
        RespawnSlimeInterval = 1 -- Slime Auto Respawn interval
    },
    Level = {
        KrakenLevel = 25, -- Kraken Level
        SlimeLevel = 25 -- King Slime Level
    },
    Keybinds = {
        ToggleUi = Enum.KeyCode.M -- Keybind to toggle the UI
    },
    Information = {
        ScriptVersion = "v2.8", -- Script Version
        StableGameVersion = "v1.1.7", -- Game Version
        Developers = "Av & Hari" -- Developers
    },
    DeveloperIds = {
        Av = 164011583, -- Av's Roblox ID
        Hari = 85087803 -- Hari's Roblox ID
    }
}

-- Services and objects
local PlaceId = game.PlaceId
local JobId = game.JobId
local Player = game.Players.LocalPlayer
local Character = Player.Character
local PlayerId = Player.UserId
local UserInputService = game:GetService("UserInputService")
local TeleportService = game:GetService("TeleportService")
local Http = game:GetService("HttpService")
local Api = "https://games.roblox.com/v1/games/"
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Framework = ReplicatedStorage:WaitForChild("Shared"):WaitForChild("Framework")
local Network = Framework:WaitForChild("Network")
local RemoteEvent = Network:WaitForChild("Remote"):WaitForChild("Event")
local RemoteFunction = Network:WaitForChild("Remote"):WaitForChild("Function")

-- Flags to control the loops
local stopRespawnKrakenLoop = false
local stopRespawnSlimeLoop = false
local stopStartKrakenLoop = false
local stopStartSlimeLoop = false
local stopBuyBlackMarketLoop = false
local stopBuyMagicShopLoop = false
local stopBuyGemTraderLoop = false
local stopBuyAuburnShopLoop = false
local stopUseAllShrinesLoop = false

-- Text boxes for the Kraken and Slime 
local KrakenLevelTextBox
local KrakenIntervalTextBox
local CurrentKrakenInterval
local SlimeLevelTextBox
local SlimeIntervalTextBox
local CurrentSlimeInterval
local ItemAmountTextBox

-- Define teleport locations
local teleportLocations = {
    BossTeleports = {{"Kraken", "Teleports you to the Kraken", {1218.1, 41.4, 408.5}},
                     {"King Slime", "Teleports you to the King Slime", {696.1, 24.3, 1216.0}}},
    NPCTeleports = {{"Omacka Murato", "Teleports you to Omacka Murato", {1230.1, 189.2, -354.5}},
                    {"Dance Champion", "Teleports you to the Dance Champion", {1573.0, 51.6, -151.1}},
                    {"Archeologist", "Teleports you to the Archeologist", {1845.9, 51.6, 268.2}},
                    {"Old Sailor", "Teleports you to the Old Sailor", {1318.3, 40.3, 633.8}},
                    {"Bruh Bounty", "Teleports you to the Bruh Bounty", {1023.3, 40.7, 587.3}}},
    ZoneTeleports = {{"Magma Basin", "Teleports you to Magma Basin", {1321.3, 189.1, -643.0}},
                     {"Gloomy Grotto", "Teleports you to Gloomy Grotto", {1601.0, 51.7, -65.3}},
                     {"Dusty Dunes", "Teleports you to Dusty Dunes", {1775.3, 51.6, 287.1}},
                     {"Sunset Shores", "Teleports you to Sunset Shores", {1306.3, 40.2, 582.5}},
                     {"Frosty Peaks", "Teleports you to Frosty Peaks", {1034.3, 40.0, 613.6}},
                     {"Auburn Woods", "Teleports you to Auburn Woods", {779.0, 24.2, 1128.4}},
                     {"Mellow Meadows", "Teleports you to Mellow Meadows", {969.1, 24.2, 1443.4}},
                     {"Pet Park", "Teleports you to Pet Park", {1201.2, 12.3, 1666.9}}},
    InteractionTeleports = {{"Black Market", "Teleports you to the Black Market", {1379.1, 294.2, -796.4}},
                            {"Magic Shop", "Teleports you to the Magic Shop", {1675.4, 52.0, -15.5}},
                            {"Gem Trader", "Teleports you to the Gem Trader", {1336.0, 40.6, 579.2}},
                            {"Sell Fish", "Teleports you to the Fish Seller", {1323.7, 40.3, 562.3}},
                            {"Auburn Shop", "Teleports you to the Auburn Shop", {787.1, 24.8, 1063.4}},
                            {"Crafter", "Teleports you to the Crafter", {824.7, 24.6, 1108.5}}}
}

-- In-game names of the shrines and shops
local shrines = {"cherry", "rune", "better-cube", "radioactive", "ticket", "gem", "egg", "berry", "cube"} -- In-game names of the shrines
local shops = {"the-blackmarket", "magic-shop", "gem-trader", "auburn-shop"} -- In-game names of the shops
local shopLoopNames = {"AuburnShop", "GemTrader", "MagicShop", "BlackMarket"} -- Name of the shops for the script

-- Items 
local Items = {"Coin Elixir", "XP Elixir", "Lucky Elixir", "Sea Elixir", "Timeful Tome", "Prismatic Sundae"} -- In-game names of the items
local ItemsDuration = {{"Coin Elixir", 5}, {"XP Elixir", 5}, {"Lucky Elixir", 5}, {"Sea Elixir", 5},
                       {"Timeful Tome", 20}, {"Prismatic Sundae", 20}}
local SelectedItem = "Coin Elixir" -- Default selected item
local ItemAmount = 1 -- Default item amount
local newFormattedDuration

-- Interval
local currentIntervalTime = Settings.Timers.RespawnKrakenInterval
local KrakenRespawnInterval = Settings.Timers.RespawnKrakenInterval
local SlimeRespawnInterval = Settings.Timers.RespawnSlimeInterval

-- Function to Respawn the bosses
local function RespawnBoss(bossName)
    local success, errorMessage = pcall(function()
        RemoteEvent:FireServer("RespawnBoss", bossName)
    end)
    if not success then
        warn("Error while respawning boss:", errorMessage)
    end
end

-- Function to respawn the Kraken without intervals
local function RespawnKraken()
    while not stopRespawnKrakenLoop do
        if Settings.Toggles.RespawnKraken and Settings.Toggles.ScriptEnabled then
            RespawnBoss("the-kraken") -- Respawn the Kraken
        else
            print("Respawn Kraken process toggled off.")
            return
        end
        wait(1)
    end
    print("RespawnKraken coroutine stopped.")
end

-- Function to respawn the Kraken with intervals
local function RespawnKrakenWithIntervals()
    while not stopRespawnKrakenLoop do
        if Settings.Toggles.RespawnKraken and Settings.Toggles.ScriptEnabled then
            if Settings.Toggles.RespawnKrakenInterval then
                local intervalTime = Settings.Timers.RespawnKrakenInterval - 1
                local waitTime = intervalTime -- Initialize wait time
                local intervalUpdated = false -- Flag to track if interval is updated

                while intervalTime > 0 do
                    if intervalTime == waitTime then
                        RespawnBoss("the-kraken") -- Respawn the Kraken at the start of each interval
                    end
                    -- Check if respawn process is toggled off
                    if stopRespawnKrakenLoop then
                        print("Respawn Kraken process toggled off.")
                        return
                    end
                    -- Update interval time if it changes
                    if Settings.Toggles.RespawnKrakenInterval and not intervalUpdated then
                        local newIntervalTime = Settings.Timers.RespawnKrakenInterval
                        if newIntervalTime ~= intervalTime then
                            intervalTime = newIntervalTime
                            waitTime = intervalTime -- Reset wait time when interval time changes
                            intervalUpdated = true -- Set flag to indicate interval is updated
                        end
                    end

                    intervalTime = intervalTime - 1
                    CurrentKrakenInterval:UpdateLabel("Time remaining in this interval: " .. intervalTime)
                    wait(1)
                end
            end
        else
            print("Respawn Kraken process toggled off.")
            return
        end

        -- Countdown for the wait time until the next interval
        if Settings.Toggles.RespawnKrakenInterval and not stopRespawnKrakenLoop then
            local timeLeft = Settings.Timers.RespawnKrakenInterval - 1
            local untilNext = timeLeft -- Initialize wait time
            local intervalUpdated = false -- Flag to track if interval is updated

            while timeLeft > 0 do
                -- Check if respawn process is toggled off
                if stopRespawnKrakenLoop then
                    print("Respawn Kraken process toggled off.")
                    return
                end

                -- Update wait time if it changes
                if Settings.Toggles.RespawnKrakenInterval and not intervalUpdated then
                    local newTimeLeft = Settings.Timers.RespawnKrakenInterval
                    if newTimeLeft ~= timeLeft then
                        untilNext = newTimeLeft
                        timeLeft = untilNext -- Reset wait time when interval time changes
                        intervalUpdated = true -- Set flag to indicate interval is updated
                    end
                end

                timeLeft = timeLeft - 1
                CurrentKrakenInterval:UpdateLabel("Time remaining until next respawn interval: " .. timeLeft)
                wait(1)
            end
        end
    end
end

-- Modify the function to update the interval time
local function ToggleRespawnKraken()
    Settings.Toggles.RespawnKraken = not Settings.Toggles.RespawnKraken
    print("Respawn Kraken toggled. State:", Settings.Toggles.RespawnKraken)
    if Settings.Toggles.RespawnKraken then
        print("Respawning Kraken...")
        stopRespawnKrakenLoop = false -- Ensure loop is not stopped
        if Settings.Toggles.RespawnKrakenInterval then
            coroutine.wrap(RespawnKrakenWithIntervals)() -- Start coroutine with intervals
        else
            coroutine.wrap(RespawnKraken)() -- Start coroutine without intervals
        end
    else
        print("Kraken respawn toggled off.")
        stopRespawnKrakenLoop = true -- Stop the RespawnKraken coroutine
    end
end

-- Function to respawn the Slime without intervals
local function RespawnSlime()
    while not stopRespawnSlimeLoop do
        if Settings.Toggles.RespawnSlime and Settings.Toggles.ScriptEnabled then
            RespawnBoss("the-slime") -- Respawn the Slime
        else
            print("Respawn Slime process toggled off.")
            return
        end
        wait(1)
    end
    print("RespawnSlime coroutine stopped.")
end

-- Function to respawn the Slime with intervals
local function RespawnSlimeWithIntervals()
    while not stopRespawnSlimeLoop do
        if Settings.Toggles.RespawnSlime and Settings.Toggles.ScriptEnabled then
            if Settings.Toggles.RespawnSlimeInterval then
                local intervalTime = Settings.Timers.RespawnSlimeInterval - 1
                local waitTime = intervalTime -- Initialize wait time
                local intervalUpdated = false -- Flag to track if interval is updated

                while intervalTime > 0 do
                    if intervalTime == waitTime then
                        RespawnBoss("the-slime") -- Respawn the Slime at the start of each interval
                    end
                    -- Check if respawn process is toggled off
                    if stopRespawnSlimeLoop then
                        print("Respawn Slime process toggled off.")
                        return
                    end
                    -- Update interval time if it changes
                    if Settings.Toggles.RespawnSlimeInterval and not intervalUpdated then
                        local newIntervalTime = Settings.Timers.RespawnSlimeInterval
                        if newIntervalTime ~= intervalTime then
                            intervalTime = newIntervalTime
                            waitTime = intervalTime -- Reset wait time when interval time changes
                            intervalUpdated = true -- Set flag to indicate interval is updated
                        end
                    end

                    intervalTime = intervalTime - 1
                    CurrentSlimeInterval:UpdateLabel("Time remaining in this interval: " .. intervalTime)
                    wait(1)
                end
            end
        else
            print("Respawn Slime process toggled off.")
            return
        end

        -- Countdown for the wait time until the next interval
        if Settings.Toggles.RespawnSlimeInterval and not stopRespawnSlimeLoop then
            local timeLeft = Settings.Timers.RespawnSlimeInterval - 1
            local untilNext = timeLeft -- Initialize wait time
            local intervalUpdated = false -- Flag to track if interval is updated

            while timeLeft > 0 do
                -- Check if respawn process is toggled off
                if stopRespawnSlimeLoop then
                    print("Respawn Slime process toggled off.")
                    return
                end

                -- Update wait time if it changes
                if Settings.Toggles.RespawnSlimeInterval and not intervalUpdated then
                    local newTimeLeft = Settings.Timers.RespawnSlimeInterval
                    if newTimeLeft ~= timeLeft then
                        untilNext = newTimeLeft
                        timeLeft = untilNext -- Reset wait time when interval time changes
                        intervalUpdated = true -- Set flag to indicate interval is updated
                    end
                end

                timeLeft = timeLeft - 1
                CurrentSlimeInterval:UpdateLabel("Time remaining until next respawn interval: " .. timeLeft)
                wait(1)
            end
        end
    end
end

-- Modify the function to update the interval time
local function ToggleRespawnSlime()
    Settings.Toggles.RespawnSlime = not Settings.Toggles.RespawnSlime
    print("Respawn Slime toggled. State:", Settings.Toggles.RespawnSlime)
    if Settings.Toggles.RespawnSlime then
        print("Respawning Slime...")
        stopRespawnSlimeLoop = false -- Ensure loop is not stopped
        if Settings.Toggles.RespawnSlimeInterval then
            coroutine.wrap(RespawnSlimeWithIntervals)() -- Start coroutine with intervals
        else
            coroutine.wrap(RespawnSlime)() -- Start coroutine without intervals
        end
    else
        print("Slime respawn toggled off.")
        stopRespawnSlimeLoop = true -- Stop the RespawnSlime coroutine
    end
end

-- Function to start the Kraken fight
local function StartKraken()
    while not stopStartKrakenLoop do
        if Settings.Toggles.StartKraken and Settings.Toggles.ScriptEnabled then
            local success, error_message = pcall(function()
                RemoteFunction:InvokeServer("BossRequest", "the-kraken", tonumber(Settings.Level.KrakenLevel))
            end)
            if not success then
                warn("Error while invoking server function:", error_message)
            end
        else
            return
        end
        wait(0.1)
    end
end

-- Function to start the Slime fight
local function StartSlime()
    while not stopStartSlimeLoop do
        if Settings.Toggles.StartSlime and Settings.Toggles.ScriptEnabled then
            local success, error_message = pcall(function()
                RemoteFunction:InvokeServer("BossRequest", "king-slime", tonumber(Settings.Level.SlimeLevel))
            end)
            if not success then
                warn("Error while invoking server function:", error_message)
            end
        else
            return
        end
        wait(0.1)
    end
end

-- Function to convert respawn kraken time to minutes and seconds
local function FormatRespawnTime(respawnTimeInSeconds)
    local minutes = math.floor(respawnTimeInSeconds / 60)
    local seconds = respawnTimeInSeconds % 60
    return string.format("%d minutes, %d seconds", minutes, seconds)
end

-- Function to use a shrine asynchronously
local function UseShrineAsync(shrineName)
    return coroutine.create(function()
        local success, result = pcall(function()
            RemoteEvent:FireServer("UseShrine", shrineName)
        end)
        if not success then
            warn("Failed to use shrine:", shrineName)
        end
    end)
end

-- Function to use all shrines continuously
local function UseAllShrinesContinuously()
    while not stopUseAllShrinesLoop do
        if Settings.Toggles.UseAllShrines and Settings.Toggles.ScriptEnabled then
            for _, shrineName in ipairs(shrines) do
                local useShrineCoroutine = UseShrineAsync(shrineName)
                coroutine.resume(useShrineCoroutine) -- Start the coroutine
            end
        end
        wait(1) -- Wait for 1 second before checking again
    end
end

-- Function to buy an item from a shop
local function BuyItem(shop, itemIndex)
    local success, result = pcall(function()
        RemoteEvent:FireServer("BuyShopItem", shop, itemIndex)
    end)
    if not success then
        warn("Failed to buy item from " .. shop .. ":", result)
    end
end

-- Create functions for buying from each shop
for i, shopName in ipairs(shops) do
    _G["Buy" .. shopLoopNames[i]] = function()
        local stopLoop = _G["stopBuy" .. shopLoopNames[i] .. "Loop"] -- Corrected the variable reference
        while not stopLoop do
            if Settings.Toggles["Buy" .. shopLoopNames[i]] and Settings.Toggles.ScriptEnabled then
                for j = 1, 3 do
                    BuyItem(shopName, j)
                end
                wait()
            else
                return
            end
        end
    end
end

-- Function to use an item asynchronously
local function UseItemAsync(item, amount)
    return coroutine.create(function()
        for i = 1, amount do
            local success, result = pcall(function()
                RemoteEvent:FireServer("UsePowerup", item)
            end)

            if not success then
                warn("Failed to use item:", result)
            end

            coroutine.yield() -- Yield to allow other operations to run
        end
    end)
end

local function UpdateDurationLabel(selectedItem, itemAmount)
    local function TotalItemDuration(item, amount)
        -- Get the duration of the item from ItemsDuration
        for i, v in ipairs(ItemsDuration) do
            if v[1] == item then
                return v[2] * amount
            end
        end
        -- If the item is not found, return 0 or some default value
        return 0
    end

    -- Update the label
    local totalMinutes = TotalItemDuration(selectedItem, itemAmount)
    local formattedDuration = "Total Item Duration: "
    if totalMinutes >= 1440 then -- 1440 minutes = 1 day
        local days = math.floor(totalMinutes / 1440)
        formattedDuration = formattedDuration .. days .. " days"
        totalMinutes = totalMinutes % 1440
        if totalMinutes > 0 then
            formattedDuration = formattedDuration .. ", "
        end
    end
    if totalMinutes >= 60 then
        local hours = math.floor(totalMinutes / 60)
        formattedDuration = formattedDuration .. hours .. " hours"
        totalMinutes = totalMinutes % 60
        if totalMinutes > 0 then
            formattedDuration = formattedDuration .. ", "
        end
    end
    if totalMinutes > 0 then
        formattedDuration = formattedDuration .. totalMinutes .. " minutes"
    end
    return formattedDuration
end

-- Creates the function to teleport to the selected zone
local function TeleportTo(x, y, z)
    local destinationPosition = Vector3.new(x, y, z)
    if Character then
        Character:SetPrimaryPartCFrame(CFrame.new(destinationPosition))
    end
end

-- Function to create teleport buttons
local function createTeleportButtons(category, teleportData)
    if teleportData then
        for _, data in ipairs(teleportData) do
            category:NewButton(data[1], data[2], function()
                TeleportTo(table.unpack(data[3]))
            end)
        end
    else
        warn("Teleport data is nil. Unable to create teleport buttons.")
    end
end

-- Function to rejoin the server
local function RejoinServer()
    TeleportService:Teleport(PlaceId, Player)
    PetCatchersHub:stop()
end

-- Function to join a public server
local function JoinPublicServer()
    local _place, _id = game.PlaceId, game.JobId
    -- Asc for lowest player count, Desc for highest player count
    local _servers = Api .. _place .. "/servers/Public?sortOrder=Asc&limit=10"
    function ListServers(cursor)
        local Raw = game:HttpGet(_servers .. ((cursor and "&cursor=" .. cursor) or ""))
        return Http:JSONDecode(Raw)
    end
    local Servers = ListServers()
    local Server = Servers.data[math.random(1, #Servers.data)]
    TeleportService:TeleportToPlaceInstance(_place, Server.id, Player)
end

function PetCatchersHub:init()
    if not HasInitialized then
        print("Initializing...")
        HasInitialized = true
        print("Done initializing")
    else
        warn("PetCatchersHub has already been initialized")
    end
end

function PetCatchersHub:gui()
    if HasInitialized then
        print("Creating gui...")
        -- Gets the UI Library
        local KavoLibrary = "https://raw.githubusercontent.com/vyworn/r-petcatchers/main/kavo-ui-lib-modified.lua"
        local Library = loadstring(game:HttpGet(KavoLibrary))()

        -- Creates the window
        local Window = Library.CreateLib("PetCatchersHub", "Ocean")

        -- Creates Tabs
        local Info = Window:NewTab("Info")
        local AutoUse = Window:NewTab("Auto")
        local AutoItems = Window:NewTab("Items")
        local Bosses = Window:NewTab("Bosses")
        local Teleports = Window:NewTab("Teleports")
        local Quests = Window:NewTab("Quests")
        local Hubs = Window:NewTab("Hubs")
        local Misc = Window:NewTab("Misc")

        -- Creates the Information Section
        local Information = Info:NewSection("Information")

        -- Creates the Labels for the Information Tab
        Information:NewLabel("Made by: " .. Settings.Information.Developers)
        Information:NewLabel("Script Version: " .. Settings.Information.ScriptVersion)
        Information:NewLabel("Stable Game Version: " .. Settings.Information.StableGameVersion)

        -- Creates the Auto Buy Shops Section
        local AutoBuyShops = AutoUse:NewSection("Auto Buy Shops")

        -- Create toggles for each shop
        for i, shopName in ipairs(shops) do
            local UIToggle = AutoBuyShops:NewToggle("Auto Buy " .. shopLoopNames[i],
                "Toggles " .. shopName .. " auto buy", function(state)
                    Settings.Toggles["Buy" .. shopLoopNames[i]] = state
                    _G["stopBuy" .. shopLoopNames[i] .. "Loop"] = not state
                    if state then
                        coroutine.wrap(_G["Buy" .. shopLoopNames[i]])()
                    end
                end)
        end

        -- Creates the Use All Shrines Toggle
        local UseAllShrinesSection = AutoUse:NewSection("Shrines")

        -- Toggle for using all shrines
        local UIUseAllShrinesToggle = UseAllShrinesSection:NewToggle("Use All Shrines", "Toggles using all shrines",
            function(state)
                Settings.Toggles.UseAllShrines = state
                if state then
                    coroutine.wrap(UseAllShrinesContinuously)() -- Start the coroutine
                end
            end)

        -- Creates the Auto Items Section
        local AutoItemsSection = AutoItems:NewSection("Auto Use Item")

        -- Creates the Labels for the Auto Items Section
        newFormattedDuration = UpdateDurationLabel(SelectedItem, ItemAmount)
        local SelectedItemLabel = AutoItemsSection:NewLabel("Selected Item: " .. SelectedItem)
        local ItemDurationLabel = AutoItemsSection:NewLabel(newFormattedDuration)

        -- Creates the TextBox for the Auto Items Section
        ItemAmountTextBox = AutoItemsSection:NewTextBox("Amount", "Enter the amount of the item to use",
            "Current amount: " .. tostring(ItemAmount), function(text)
                ItemAmount = tonumber(text)
                ItemAmountTextBox:UpdatePlaceholder("Current amount: " .. ItemAmount)
                newFormattedDuration = UpdateDurationLabel(SelectedItem, ItemAmount)
                ItemDurationLabel:UpdateLabel(newFormattedDuration)
            end)

        -- Creates the Dropdown for the Auto Items Section
        AutoItemsSection:NewDropdown("Select Item", "Select the Item to use", Items, function(item)
            SelectedItem = item
            newFormattedDuration = UpdateDurationLabel(SelectedItem, ItemAmount)
            SelectedItemLabel:UpdateLabel("Selected Item: " .. SelectedItem)
            ItemDurationLabel:UpdateLabel(newFormattedDuration)
        end)

        -- Creates the Button for the Auto Items Section
        AutoItemsSection:NewButton("Use Item", "Uses the selected item", function(item, amount)
            amount = tonumber(ItemAmount)
            item = tostring(SelectedItem)
            local itemCoroutine = UseItemAsync(item, amount)

            -- Execute the coroutine until it completes
            while coroutine.status(itemCoroutine) ~= "dead" do
                local success, errorMsg = coroutine.resume(itemCoroutine)
                if not success then
                    error(errorMsg) -- Terminate if coroutine encounters an error
                end
            end
        end)

        -- Creates the Sections for the Bosses Tab
        local Kraken = Bosses:NewSection("Kraken")
        local Slime = Bosses:NewSection("King Slime")

        -- Creates the Respawn Kraken Interval Label 
        local KrakenRespawnTime = "Current Respawn Interval: " .. FormatRespawnTime(KrakenRespawnInterval)
        local RespawnKrakenIntervalLabel = Kraken:NewLabel(KrakenRespawnTime)

        -- Timer for the current interval time
        CurrentKrakenInterval = Kraken:NewLabel("Interval Phase")

        -- Creates the Start Kraken Fight Toggle
        local UIStartKrakenToggle = Kraken:NewToggle("Auto Kraken Fight", "Auto fights the Kraken", function(state)
            Settings.Toggles.StartKraken = state
            stopStartKrakenLoop = not state
            if state then
                coroutine.wrap(StartKraken)()
            end
        end)

        -- Creates the Respawn Kraken Toggle
        local UIRespawnKrakenToggle = Kraken:NewToggle("Auto Kraken Respawn", "Auto respawns the Kraken",
            ToggleRespawnKraken)

        -- Creates the Respawn Kraken Interval Toggle
        local UIRespawnKrakenInterval = Kraken:NewToggle("Auto Kraken Respawn With Interval",
            "Toggles the respawn interval", function(state)
                Settings.Toggles.RespawnKrakenInterval = state
                ToggleRespawnKraken() -- Toggle the respawn feature based on the new interval state
            end)

        -- Update the interval time from the textbox
        KrakenIntervalTextBox = Kraken:NewTextBox("Respawn Interval",
            "Enter the auto respawn interval of the Kraken in seconds",
            "Current Interval: " .. Settings.Timers.RespawnKrakenInterval, function(text)
                Settings.Timers.RespawnKrakenInterval = tonumber(text)
                currentIntervalTime = Settings.Timers.RespawnKrakenInterval -- Update the current interval time
                KrakenIntervalTextBox:UpdatePlaceholder("Current Interval: " .. Settings.Timers.RespawnKrakenInterval)
                RespawnKrakenIntervalLabel:UpdateLabel("Current Respawn Interval: " ..
                                                           FormatRespawnTime(Settings.Timers.RespawnKrakenInterval))
            end)

        -- Creates the Kraken Level TextBox
        KrakenLevelTextBox = Kraken:NewTextBox("Kraken Level", "Enter the level of the Kraken you want to fight",
            "Current Level: " .. Settings.Level.KrakenLevel, function(text)
                Settings.Level.KrakenLevel = tonumber(text)
                KrakenLevelTextBox:UpdatePlaceholder("Current Level: " .. Settings.Level.KrakenLevel)
            end)

        -- Creates the Respawn Slime Interval Label
        local SlimeRespawnTime = "Respawn Interval: " .. FormatRespawnTime(SlimeRespawnInterval)
        local RespawnSlimeIntervalLabel = Slime:NewLabel(SlimeRespawnTime)

        -- Timer for the current interval time
        CurrentSlimeInterval = Slime:NewLabel("Interval Phase")

        -- Creates the StartSlimeFight Toggle
        local UIStartSlimeToggle = Slime:NewToggle("Auto Slime Fight", "Auto fights the Slime", function(state)
            Settings.Toggles.StartSlime = state
            stopStartSlimeLoop = not state
            if state then
                coroutine.wrap(StartSlime)()
            end
        end)

        -- Creates the Respawn Slime Toggle
        local UIRespawnSlimeToggle = Slime:NewToggle("Auto Slime Respawn", "Auto respawns the Slime", function(state)
            Settings.Toggles.RespawnSlime = state
            stopRespawnSlimeLoop = not state
            if state then
                coroutine.wrap(RespawnSlime)()
            end
        end)

        -- Creates the Respawn Slime Interval Toggle
        local UIRespawnSlimeInterval = Slime:NewToggle("Respawn Interval", "Toggles the respawn interval",
            function(state)
                Settings.Toggles.RespawnSlimeInterval = state
                ToggleRespawnSlime() -- Toggle the respawn feature based on the new interval state
            end)

        -- Creates the Respawn Slime Interval TextBox
        SlimeIntervalTextBox = Slime:NewTextBox("Respawn Interval",
            "Enter the auto respawn interval of the King Slime in seconds",
            "Current Interval: " .. Settings.Timers.RespawnSlimeInterval, function(text)
                Settings.Timers.RespawnSlimeInterval = tonumber(text)
                SlimeRespawnInterval = Settings.Timers.RespawnSlimeInterval -- Update the current interval time
                SlimeIntervalTextBox:UpdatePlaceholder("Current Interval: " .. Settings.Timers.RespawnSlimeInterval)
                RespawnSlimeIntervalLabel:UpdateLabel("Current Respawn Interval: " .. 
                                                          FormatRespawnTime(Settings.Timers.RespawnSlimeInterval))
            end)

        -- Creates the Slime Level TextBox
        SlimeLevelTextBox = Slime:NewTextBox("Slime Level", "Enter the level of the King Slime you want to fight",
            "Current Level: " .. Settings.Level.SlimeLevel, function(text)
                Settings.Level.SlimeLevel = tonumber(text)
                SlimeLevelTextBox:UpdatePlaceholder("Current Level: " .. Settings.Level.SlimeLevel)
            end)

        -- Creates the Sections for the Teleports Tab
        local BossTeleports = Teleports:NewSection("Boss Teleports")
        local NPCTeleports = Teleports:NewSection("NPC Teleports")
        local ZoneTeleports = Teleports:NewSection("Zone Teleports")
        local InteractionTeleports = Teleports:NewSection("Interaction Teleports")

        createTeleportButtons(BossTeleports, teleportLocations.BossTeleports)
        createTeleportButtons(NPCTeleports, teleportLocations.NPCTeleports)
        createTeleportButtons(ZoneTeleports, teleportLocations.ZoneTeleports)
        createTeleportButtons(InteractionTeleports, teleportLocations.InteractionTeleports)

        -- Creates the Sections for the Quests Tab
        local AutoQuests = Quests:NewSection("Auto Quests")

        -- Creates the Buttons for the Auto Quests Section
        AutoQuests:NewButton("GatoHub Auto Strange Quests", "Auto Strange Quests by Gato Hub", function()
            local AutoStrange = "https://raw.githubusercontent.com/Catto-YFCN/GatoHub/main/Quests/GatoHub_AutoStrange"
            loadstring(game:HttpGet(AutoStrange))()
        end)
        AutoQuests:NewButton("GatoHub Auto Bruh Quests", "Auto Bruh Quests by Gato Hub", function()
            local AutoBruh = "https://raw.githubusercontent.com/Catto-YFCN/GatoHub/main/Quests/GatoHub_AutoBruh"
            loadstring(game:HttpGet(AutoBruh))()
        end)

        AutoQuests:NewButton("GatoHub Auto Sailor Quests", "Auto Sailor Quests by Gato Hub", function()
            local AutoSailor = "https://raw.githubusercontent.com/Catto-YFCN/GatoHub/main/Quests/GatoHub_AutoSailor"
            loadstring(game:HttpGet(AutoSailor))()
        end)

        -- Creates the Sections for the Hubs Tab
        local ScriptHubs = Hubs:NewSection("Script Hubs")

        -- Creates the Buttons for the Script Hubs Section
        ScriptHubs:NewButton("Huge Games Hub", "Opens the Huge Games Hub", function()
            local HugeGamesHub = "https://api.luarmor.net/files/v3/loaders/f38c17c4a5e9f38a7dac14ce0940688d.lua"
            loadstring(game:HttpGet(HugeGamesHub))()
        end)

        ScriptHubs:NewButton("Gato Hub", "Opens the Gato Hub", function()
            local GatoHub = "https://raw.githubusercontent.com/Catto-YFCN/GatoHub/main/PetCatchers"
            loadstring(game:HttpGet(GatoHub))()
        end)

        ScriptHubs:NewButton("Lenut Hub", "Opens the Lenut Hub", function()
            local LenutHub = "https://raw.githubusercontent.com/lenutjr/pc/main/petcatchers"
            loadstring(game:HttpGet(LenutHub))()
        end)

        if PlayerId == Settings.DeveloperIds.Av or PlayerId == Settings.DeveloperIds.Hari then
            -- Creates the Sections for the Developer Tab
            local Developer = Window:NewTab("Developer")

            -- Creates the Sections for the Developer Tab
            local DeveloperTools = Developer:NewSection("Developer Tools")

            -- Creates the Buttons for the Developer Section
            DeveloperTools:NewButton("Infinite Yield", "Opens Infinite Yield", function()
                local InfiniteYield = "https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"
                loadstring(game:HttpGet(InfiniteYield))()
            end)

            DeveloperTools:NewButton("Remote Spy", "Opens Simple Remote Spy", function()
                local RemoteSpy = "https://raw.githubusercontent.com/infyiff/backup/main/SimpleSpyV3/main.lua"
                loadstring(game:HttpGet(RemoteSpy))()
            end)

            DeveloperTools:NewButton("Join Public Server", "Joins a public server", function()
                JoinPublicServer()
            end)

            DeveloperTools:NewButton("Rejoin Game", "Rejoins the game", function()
                RejoinServer()
            end)

            DestroyButton = DeveloperTools:NewButton("Destroy Script", "Destroys the script and gui", function()
                PetCatchersHub:stop()
            end)

            -- Creates the Sections for the Misc Tab
            local Keybinds = Misc:NewSection("Keybinds")
            local Others = Misc:NewSection("Others")

            -- Creates the keybind to toggle the UI
            Keybinds:NewKeybind("Select Keybind to toggle the UI", "Hides/shows the UI", Settings.Keybinds.ToggleUi,
                function()
                    Library:ToggleUI(HasInitialized)
                end)

            -- Creates the Buttons for the Misc Section
            Others:NewButton("Join Public Server", "Joins a public server", function()
                JoinPublicServer()
            end)

            Others:NewButton("Rejoin Game", "Rejoins the game", function()
                RejoinServer()
            end)

            Others:NewButton("Destroy Script", "Destroys the script and gui", function()
                PetCatchersHub:stop()
            end)
            print("Done creating gui")
            print("PetCatchersHub is ready\n")
        end
    else
        warn("PetCatchersHub has not been initialized")
    end
end

function PetCatchersHub:stop()
    print("Stopping PetCatchersHub...")
    print("Disabling variables...")
    Settings = nil
    shrines = nil
    shops = nil
    shopLoopNames = nil
    Items = nil
    ItemsDuration = nil
    SelectedItem = nil
    ItemAmount = nil
    newFormattedDuration = nil
    currentIntervalTime = nil
    KrakenRespawnInterval = nil
    SlimeRespawnInterval = nil
    KrakenLevelTextBox = nil
    KrakenIntervalTextBox = nil
    CurrentKrakenInterval = nil
    SlimeLevelTextBox = nil
    SlimeIntervalTextBox = nil
    CurrentSlimeInterval = nil
    ItemAmountTextBox = nil
    DestroyButton = nil
    print("Stopping loops...")
    stopRespawnKrakenLoop = nil
    stopRespawnSlimeLoop = nil
    stopStartKrakenLoop = nil
    stopStartSlimeLoop = nil
    stopBuyBlackMarketLoop = nil
    stopBuyMagicShopLoop = nil
    stopBuyGemTraderLoop = nil
    stopBuyAuburnShopLoop = nil
    stopUseAllShrinesLoop = nil
    print("Stopping coroutines...")
    RespawnKraken = nil
    RespawnKrakenWithIntervals = nil
    RespawnSlime = nil
    ToggleRespawnKraken = nil
    RespawnBoss = nil
    ToggleRespawnSlime = nil
    StartKraken = nil
    StartSlime = nil
    UseShrineAsync = nil
    UseAllShrinesContinuously = nil
    BuyItem = nil
    UseItemAsync = nil
    UpdateDurationLabel = nil
    TeleportTo = nil
    RejoinServer = nil
    JoinPublicServer = nil
    print("Destroying gui...")
    DestroyButton:DestroyGui()
    print("Deinitializing...")
    HasInitialized = false
    PetCatchersHub = nil
    print("Stopped PetCatchersHub")
end

PetCatchersHub:init()
PetCatchersHub:gui()
