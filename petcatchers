-- Encapsulated script variables
local KrakenLevel
local SlimeLevel

-- Encapsulated script function
local function Script()
    -- Settings and default configurations
    local Settings = {
        Information = {
            ScriptVersion = "v2.3", -- Script Version
            StableGameVersion = "v1.1.7", -- Game Version
            Developers = "Av & Hari" -- Developers
        },
        Keybinds = {
            ToggleUI = Enum.KeyCode.M -- Keybind to toggle the UI
        },
        Toggles = {
            ScriptEnabled = true, -- Toggle for enabling/disabling the script
            RespawnKraken = false, -- Toggle for Kraken respawn
            RespawnSlime = false, -- Toggle for Slime respawn
            StartKraken = false, -- Toggle for starting Kraken fight
            StartSlime = false, -- Toggle for starting Slime fight
            BuyBlackMarket = false, -- Toggle for Black Market auto buy
            BuyGemTrader = false, -- Toggle for Gem Trader auto buy
            BuyAuburnShop = false, -- Toggle for Auburn Shop auto buy
            BuyMagicShop = false, -- Toggle for Magic Shop auto buy
            UseAllShrines = false -- Toggle for using all shrines
        },
        Timers = {
            RespawnCooldown = 5, -- Wait() time between Kraken respawns
            BuyCooldown = 0.1, -- Cooldown period after buying all items
            NotificationDuration = 1 -- Duration of the notification
        },
        Level = {
            KrakenLevel = "25", -- Kraken Level
            SlimeLevel = "25" -- King Slime Level
        }
    }

    -- Services and objects
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Framework = ReplicatedStorage:WaitForChild("Shared"):WaitForChild("Framework")
    local Network = Framework:WaitForChild("Network")
    local RemoteEvent = Network:WaitForChild("Remote"):WaitForChild("Event")
    local RemoteFunction = Network:WaitForChild("Remote"):WaitForChild("Function")

    -- Flags to control the loops
    local stopRespawnKrakenLoop = false
    local stopRespawnSlimeLoop = false
    local stopStartKrakenLoop = false
    local stopStartSlimeLoop = false
    local stopBuyBlackMarketLoop = false
    local stopBuyMagicShopLoop = false
    local stopBuyGemTraderLoop = false
    local stopBuyAuburnShopLoop = false
    local stopUseAllShrinesLoop = false

    -- Function to display notifications
    local function ActivityNotification(title, text)
        if Settings.Toggles.ScriptEnabled then
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = tostring(title),
                Text = tostring(text),
                Duration = Settings.Timers.NotificationDuration
            })
        end
    end

    -- Function to print notifications to the console
    local function ConsoleNotification(title, text)
        if Settings.Toggles.ScriptEnabled then
            print(tostring(title) .. " : " .. tostring(text))
        end
    end

    -- Function to respawn the Kraken
    local function RespawnKraken()
        while not stopRespawnKrakenLoop do
            if Settings.Toggles.RespawnKraken and Settings.Toggles.ScriptEnabled then
                local success, errorMessage = pcall(function()
                    RemoteEvent:FireServer("RespawnBoss", "the-kraken")
                    wait(Settings.Timers.RespawnCooldown)
                end)
                if not success then
                    warn("Error while respawning Kraken:", errorMessage)
                end
            else
                return
            end
            wait(0.1)
        end
    end

    -- Function to start the Kraken fight
    local function StartKraken()
        while not stopStartKrakenLoop do
            if Settings.Toggles.StartKraken and Settings.Toggles.ScriptEnabled then
                local success, error_message = pcall(function()
                    RemoteFunction:InvokeServer("BossRequest", "the-kraken", tonumber(Settings.Level.KrakenLevel))
                end)
                if not success then
                    warn("Error while invoking server function:", error_message)
                end
            else
                return
            end
            wait(0.1)
        end
    end

    -- Function to respawn the Slime
    local function RespawnSlime()
        while not stopRespawnSlimeLoop do
            if Settings.Toggles.RespawnSlime and Settings.Toggles.ScriptEnabled then
                local success, errorMessage = pcall(function()
                    RemoteEvent:FireServer("RespawnBoss", "king-slime")
                    wait(Settings.Timers.RespawnCooldown)
                end)
                if not success then
                    warn("Error while respawning Slime:", errorMessage)
                end
            else
                return
            end
            wait(0.1)
        end
    end

    -- Function to start the Slime fight
    local function StartSlime()
        while not stopStartSlimeLoop do
            if Settings.Toggles.StartSlime and Settings.Toggles.ScriptEnabled then
                local success, error_message = pcall(function()
                    RemoteFunction:InvokeServer("BossRequest", "king-slime", tonumber(Settings.Level.SlimeLevel))
                end)
                if not success then
                    warn("Error while invoking server function:", error_message)
                end
            else
                return
            end
            wait(0.1)
        end
    end

    local function UseShrine(shrine)
        local success, result = pcall(RemoteEvent.FireServer, RemoteEvent, "UseShrine", shrine)
        if not success then
            warn("Failed to use shrine:", shrine)
        end
    end

    local function UseAllShrines()
        local shrines = {"egg", "berry", "cherry", "radioactive", "gem", "rune", "ticket", "better-cube"}
        while Settings.Toggles.ScriptEnabled and Settings.Toggles.UseAllShrines do
            for _, shrine in ipairs(shrines) do
                UseShrine(shrine)
                wait(0.25) -- Adjust the delay as needed
            end
        end
    end

    -- Function to buy an item from a shop
    local function BuyItem(shop, itemIndex)
        local success, result = pcall(RemoteEvent.FireServer, RemoteEvent, "BuyShopItem", shop, itemIndex)
        if not success then
            warn("Failed to buy item from " .. shop .. ":", result)
        end
    end

    -- Function to automatically buy items from a shop
    local function BuyShop(shop)
        local stopLoop = "stopBuy" .. shop .. "Loop"
        while not _G[stopLoop] do
            if Settings.Toggles["Buy" .. shop] and Settings.Toggles.ScriptEnabled then
                for i = 1, 3 do
                    BuyItem(shop, i)
                    wait()
                end
                wait(Settings.Timers.BuyCooldown)
            else
                return
            end
        end
    end

    -- Create functions for each shop
    local shops = {"BlackMarket", "MagicShop", "GemTrader", "AuburnShop"}
    for _, shop in ipairs(shops) do
        _G["Buy" .. shop] = function()
            BuyShop(string.lower(shop))
        end
    end

    -- Notify script loading and initial Settings
    warn("Made by Av & Hari")
    warn("Loaded script Version " .. tostring(Settings.Information.ScriptVersion))
    warn("Works on game Version " .. tostring(Settings.Information.StableGameVersion))

    -- Gets the UI Library
    local Library = loadstring(game:HttpGet(
        "https://raw.githubusercontent.com/vyworn/r-petcatchers/main/kavo-ui-lib-modified.lua"))()

    -- Creates the window
    local Window = Library.CreateLib("Pet Catchers Hub  " .. Settings.Information.ScriptVersion, "Ocean")

    -- Creates the Information tab
    local Information = Window:NewTab("Information")

    -- Creates the AutoUse Tab
    local AutoUse = Window:NewTab("Auto")

    -- Creates the Bosses Tab
    local Bosses = Window:NewTab("Bosses")

    -- Creates the Keybinds Tab
    local Keybinds = Window:NewTab("Keybinds")

    -- Creates the Developers Section
    Information:NewSection("Made by: " .. Settings.Information.Developers)

    -- Creates the Script Version Section
    Information:NewSection("Script Version: " .. Settings.Information.ScriptVersion)

    -- Creates the Game Version Section
    Information:NewSection("Game Version: " .. Settings.Information.StableGameVersion)

    -- Creates the Keybind Section
    local Keybinds = Keybinds:NewSection("Keybinds")

    -- Creates the keybind to toggle the UI
    Keybinds:NewKeybind("Select Keybind to toggle the UI", "Hides/shows the UI", Settings.Keybinds.ToggleUI, function()
        Library:ToggleUI()
    end)

    -- Creates the Auto Buy Shops Section
    local AutoBuyShops = AutoUse:NewSection("Auto Buy Shops")
    for _, shop in ipairs(shops) do
        local UIShopToggle = AutoBuyShops:NewToggle("Auto Buy " .. shop,
            "Toggles " .. string.lower(shop) .. " auto buy", function(state)
                Settings.Toggles["Buy" .. shop] = state
                _G["stopBuy" .. shop .. "Loop"] = not state
                if state then
                    coroutine.wrap(_G["Buy" .. shop])()
                end
            end)
    end

    -- Creates the Use All Shrines Toggle
    local UseAllShrinesSection = AutoUse:NewSection("Shrines")
    local UIUseAllShrinesToggle = UseAllShrinesSection:NewToggle("Use All Shrines",
        "Toggles the state of the Use All Shrines", function(state)
            Settings.Toggles.UseAllShrines = state
            stopUseAllShrinesLoop = not state
            if state then
                coroutine.wrap(UseAllShrines)()
            end
        end)

    -- Creates the Kraken Section
    local Kraken = Bosses:NewSection("Kraken")

    -- Creates the Respawn Kraken Toggle
    local UIRespawnKrakenToggle = Kraken:NewToggle("Respawn Kraken", "Toggles the state of the Respawn Kraken",
        function(state)
            Settings.Toggles.RespawnKraken = state
            stopRespawnKrakenLoop = not state
            if state then
                coroutine.wrap(RespawnKraken)()
            end
        end)

    -- Creates the Start Kraken Fight Toggle
    local UIStartKrakenToggle = Kraken:NewToggle("Start Kraken Fight", "Starts the Kraken fight", function(state)
        Settings.Toggles.StartKraken = state
        stopStartKrakenLoop = not state
        if state then
            coroutine.wrap(StartKraken)()
        end
    end)

    -- Creates the Kraken Level TextBox
    KrakenLevel = Kraken:NewTextBox("Kraken Level", "Enter the level of the Kraken",
        "Current Level: " .. Settings.Level.KrakenLevel, function(text)
            Settings.Level.KrakenLevel = tostring(text)
            KrakenLevel:UpdatePlaceholder("Current Level: " .. Settings.Level.KrakenLevel)
        end)

    -- Creates the King Slime Section
    local Slime = Bosses:NewSection("King Slime")

    -- Creates the Respawn Slime Toggle
    local UIRespawnSlimeToggle = Slime:NewToggle("Respawn Slime", "Toggles the state of the Respawn Slime",
        function(state)
            Settings.Toggles.RespawnSlime = state
            stopRespawnSlimeLoop = not state
            if state then
                coroutine.wrap(RespawnSlime)()
            end
        end)

    -- Creates the StartSlimeFight Toggle
    local UIStartSlimeToggle = Slime:NewToggle("Start Slime Fight", "Starts the Slime fight", function(state)
        Settings.Toggles.StartSlime = state
        stopStartSlimeLoop = not state
        if state then
            coroutine.wrap(StartSlime)()
        end
    end)

    -- Creates the Slime Level TextBox
    SlimeLevel = Slime:NewTextBox("Slime Level", "Enter the level of the King Slime",
        "Current Level: " .. Settings.Level.SlimeLevel, function(text)
            Settings.Level.SlimeLevel = tostring(text)
            SlimeLevel:UpdatePlaceholder("Current Level: " .. Settings.Level.SlimeLevel)
        end)

    -- End of Script.
end

Script() -- Call the encapsulated script function to execute the code
