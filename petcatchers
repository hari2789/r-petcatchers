local PetCatchersHub = {}
local DestroyButton
local DestroyScript = false
local HasInitialized = false

-- Settings and default configurations
local Settings = {
    Toggles = {
        ScriptEnabled = true, -- Toggle for enabling/disabling the script
        RespawnKraken = false, -- Toggle for Kraken respawn
        RespawnSlime = false, -- Toggle for Slime respawn
        StartKraken = false, -- Toggle for starting Kraken fight
        StartSlime = false, -- Toggle for starting Slime fight
        BuyBlackMarket = false, -- Toggle for Black Market auto buy
        BuyGemTrader = false, -- Toggle for Gem Trader auto buy
        BuyAuburnShop = false, -- Toggle for Auburn Shop auto buy
        BuyMagicShop = false, -- Toggle for Magic Shop auto buy
        UseAllShrines = false -- Toggle for using all shrines
    },
    Timers = {
        RespawnCooldown = 5 -- Wait() time between Kraken respawns
    },
    Level = {
        KrakenLevel = 25, -- Kraken Level
        SlimeLevel = 25 -- King Slime Level
    },
    Keybinds = {
        ToggleUi = Enum.KeyCode.M -- Keybind to toggle the UI
    },
    Information = {
        ScriptVersion = "v2.6", -- Script Version
        StableGameVersion = "v1.1.7", -- Game Version
        Developers = "Av & Hari" -- Developers
    },
    DeveloperIds = {
        Av = 164011583, -- Av's Roblox ID
        Hari = 85087803 -- Hari's Roblox ID
    }
}

-- Services and objects
local PlaceId = game.PlaceId
local JobId = game.JobId
local Player = game.Players.LocalPlayer
local Character = Player.Character
local PlayerId = Player.UserId
local UserInputService = game:GetService("UserInputService")
local TeleportService = game:GetService("TeleportService")
local Http = game:GetService("HttpService")
local Api = "https://games.roblox.com/v1/games/"
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Framework = ReplicatedStorage:WaitForChild("Shared"):WaitForChild("Framework")
local Network = Framework:WaitForChild("Network")
local RemoteEvent = Network:WaitForChild("Remote"):WaitForChild("Event")
local RemoteFunction = Network:WaitForChild("Remote"):WaitForChild("Function")

-- Flags to control the loops
local stopRespawnKrakenLoop = false
local stopRespawnSlimeLoop = false
local stopStartKrakenLoop = false
local stopStartSlimeLoop = false
local stopBuyBlackMarketLoop = false
local stopBuyMagicShopLoop = false
local stopBuyGemTraderLoop = false
local stopBuyAuburnShopLoop = false
local stopUseAllShrinesLoop = false

-- In-game names of the shrines and shops
local shrines = {"cherry", "rune", "better-cube", "radioactive", "ticket", "gem", "egg", "berry", "cube"} -- In-game names of the shrines
local shops = {"the-blackmarket", "magic-shop", "gem-trader", "auburn-shop"} -- In-game names of the shops
local shopLoopNames = {"AuburnShop", "GemTrader", "MagicShop", "BlackMarket"} -- Name of the shops for the script

-- Boss Levels
local KrakenLevel
local SlimeLevel

-- Function to respawn the Kraken
local function RespawnKraken()
    while not stopRespawnKrakenLoop do
        if Settings.Toggles.RespawnKraken and Settings.Toggles.ScriptEnabled then
            local success, errorMessage = pcall(function()
                RemoteEvent:FireServer("RespawnBoss", "the-kraken")
                wait(Settings.Timers.RespawnCooldown)
            end)
            if not success then
                warn("Error while respawning Kraken:", errorMessage)
            end
        else
            return
        end
        wait(0.1)
    end
end

-- Function to start the Kraken fight
local function StartKraken()
    while not stopStartKrakenLoop do
        if Settings.Toggles.StartKraken and Settings.Toggles.ScriptEnabled then
            local success, error_message = pcall(function()
                RemoteFunction:InvokeServer("BossRequest", "the-kraken", tonumber(Settings.Level.KrakenLevel))
            end)
            if not success then
                warn("Error while invoking server function:", error_message)
            end
        else
            return
        end
        wait(0.1)
    end
end

-- Function to respawn the Slime
local function RespawnSlime()
    while not stopRespawnSlimeLoop do
        if Settings.Toggles.RespawnSlime and Settings.Toggles.ScriptEnabled then
            local success, errorMessage = pcall(function()
                RemoteEvent:FireServer("RespawnBoss", "king-slime")
                wait(Settings.Timers.RespawnCooldown)
            end)
            if not success then
                warn("Error while respawning Slime:", errorMessage)
            end
        else
            return
        end
        wait(0.1)
    end
end

-- Function to start the Slime fight
local function StartSlime()
    while not stopStartSlimeLoop do
        if Settings.Toggles.StartSlime and Settings.Toggles.ScriptEnabled then
            local success, error_message = pcall(function()
                RemoteFunction:InvokeServer("BossRequest", "king-slime", tonumber(Settings.Level.SlimeLevel))
            end)
            if not success then
                warn("Error while invoking server function:", error_message)
            end
        else
            return
        end
        wait(0.1)
    end
end

-- Function to use a shrine
local function UseShrine(shrineName)
    local success, result = pcall(function()
        RemoteEvent:FireServer("UseShrine", shrineName)
    end)
    if not success then
        warn("Failed to use shrine:", shrineName)
    end
end

-- Use coroutine.wrap for using shrines asynchronously
local function UseAllShrines()
    while not stopUseAllShrinesLoop do
        if Settings.Toggles.UseAllShrines and Settings.Toggles.ScriptEnabled then
            for _, shrineName in ipairs(shrines) do
                coroutine.wrap(function()
                    UseShrine(shrineName)
                end)()
                wait()
            end
        end
    end
end

-- Function to buy an item from a shop
local function BuyItem(shop, itemIndex)
    local success, result = pcall(function()
        RemoteEvent:FireServer("BuyShopItem", shop, itemIndex)
    end)
    if not success then
        warn("Failed to buy item from " .. shop .. ":", result)
    end
end

-- Create functions for buying from each shop
for i, shopName in ipairs(shops) do
    _G["Buy" .. shopLoopNames[i]] = function()
        local stopLoop = _G["stopBuy" .. shopLoopNames[i] .. "Loop"] -- Corrected the variable reference
        while not stopLoop do
            if Settings.Toggles["Buy" .. shopLoopNames[i]] and Settings.Toggles.ScriptEnabled then
                for j = 1, 3 do
                    BuyItem(shopName, j)
                end
                wait()
            else
                return
            end
        end
    end
end

-- Define teleport locations
local teleportLocations = {
    BossTeleports = {
        {"Kraken", "Teleports you to the Kraken", {1218.1, 41.4, 408.5}},
        {"King Slime", "Teleports you to the King Slime", {696.1, 24.3, 1216.0}}
        },
    NPCTeleports = {
        {"Omacka Murato", "Teleports you to Omacka Murato", {1230.1, 189.2, -354.5}},
        {"Dance Champion", "Teleports you to the Dance Champion", {1573.0, 51.6, -151.1}},
        {"Archeologist", "Teleports you to the Archeologist", {1845.9, 51.6, 268.2}},
        {"Old Sailor", "Teleports you to the Old Sailor", {1318.3, 40.3, 633.8}},
        {"Bruh Bounty", "Teleports you to the Bruh Bounty", {1023.3, 40.7, 587.3}}
        },
    ZoneTeleports = {
        {"Magma Basin", "Teleports you to Magma Basin", {1321.3, 189.1, -643.0}},
        {"Gloomy Grotto", "Teleports you to Gloomy Grotto", {1601.0, 51.7, -65.3}},
        {"Dusty Dunes", "Teleports you to Dusty Dunes", {1775.3, 51.6, 287.1}},
        {"Sunset Shores", "Teleports you to Sunset Shores", {1306.3, 40.2, 582.5}},
        {"Frosty Peaks", "Teleports you to Frosty Peaks", {1034.3, 40.0, 613.6}},
        {"Auburn Woods", "Teleports you to Auburn Woods", {779.0, 24.2, 1128.4}},
        {"Mellow Meadows", "Teleports you to Mellow Meadows", {969.1, 24.2, 1443.4}},
        {"Pet Park", "Teleports you to Pet Park", {1201.2, 12.3, 1666.9}}
        },
    InteractionTeleports = {
        {"Black Market", "Teleports you to the Black Market", {1379.1, 294.2, -796.4}},
        {"Magic Shop", "Teleports you to the Magic Shop", {1675.4, 52.0, -15.5}},
        {"Gem Trader", "Teleports you to the Gem Trader", {1336.0, 40.6, 579.2}},
        {"Sell Fish", "Teleports you to the Fish Seller", {1323.7, 40.3, 562.3}},
        {"Auburn Shop", "Teleports you to the Auburn Shop", {787.1, 24.8, 1063.4}},
        {"Crafter", "Teleports you to the Crafter", {824.7, 24.6, 1108.5}}
        }
}

-- Creates the function to teleport to the selected zone
local function TeleportTo(x, y, z)
    local destinationPosition = Vector3.new(x, y, z)
    if Character then
        Character:SetPrimaryPartCFrame(CFrame.new(destinationPosition))
    end
end

-- Function to create teleport buttons
local function createTeleportButtons(category, teleportData)
    if teleportData then
        for _, data in ipairs(teleportData) do
            category:NewButton(data[1], data[2], function()
                TeleportTo(table.unpack(data[3]))
            end)
        end
    else
        warn("Teleport data is nil. Unable to create teleport buttons.")
    end
end

local function RejoinServer()
    TeleportService:Teleport(PlaceId, Player)
end

-- Function to join a public server
local function JoinPublicServer()
    local _place, _id = game.PlaceId, game.JobId
    -- Asc for lowest player count, Desc for highest player count
    local _servers = Api .. _place .. "/servers/Public?sortOrder=Asc&limit=10"
    function ListServers(cursor)
        local Raw = game:HttpGet(_servers .. ((cursor and "&cursor=" .. cursor) or ""))
        return Http:JSONDecode(Raw)
    end
    local Servers = ListServers()
    local Server = Servers.data[math.random(1, #Servers.data)]
    TeleportService:TeleportToPlaceInstance(_place, Server.id, Player)
end

function PetCatchersHub:init()
    if not HasInitialized then
        print("Initializing...")
        wait(0.5)
        HasInitialized = true
        print("Done initializing")
        wait(0.5)
    else
        warn("PetCatchersHub has already been initialized")
    end
end

function PetCatchersHub:gui()
    if HasInitialized then
        print("Creating gui...")
        -- Gets the UI Library
        local KavoLibrary = "https://raw.githubusercontent.com/vyworn/r-petcatchers/main/kavo-ui-lib-modified.lua"
        local Library = loadstring(game:HttpGet(KavoLibrary))()

        -- Creates the window
        local Window = Library.CreateLib("PetCatchersHub", "Ocean")

        -- Creates Tabs
        local Information = Window:NewTab("Information")
        local AutoUse = Window:NewTab("Auto")
        local Bosses = Window:NewTab("Bosses")
        local Teleports = Window:NewTab("Teleports")
        local Quests = Window:NewTab("Quests")
        local Hubs = Window:NewTab("Hubs")
        local Misc = Window:NewTab("Misc")

        -- Creates the Sections for the Information Tab
        Information:NewSection("Made by: " .. Settings.Information.Developers)
        Information:NewSection("Script Version: " .. Settings.Information.ScriptVersion)
        Information:NewSection("Stable Game Version: " .. Settings.Information.StableGameVersion)

        -- Creates the Auto Buy Shops Section
        local AutoBuyShops = AutoUse:NewSection("Auto Buy Shops")

        -- Create toggles for each shop
        for i, shopName in ipairs(shops) do
            local UIToggle = AutoBuyShops:NewToggle("Auto Buy " .. shopLoopNames[i],
                "Toggles " .. shopName .. " auto buy", function(state)
                    Settings.Toggles["Buy" .. shopLoopNames[i]] = state
                    _G["stopBuy" .. shopLoopNames[i] .. "Loop"] = not state
                    if state then
                        coroutine.wrap(_G["Buy" .. shopLoopNames[i]])()
                    end
                end)
        end

        -- Creates the Use All Shrines Toggle
        local UseAllShrinesSection = AutoUse:NewSection("Shrines")

        -- Toggle for using all shrines
        local UIUseAllShrinesToggle = UseAllShrinesSection:NewToggle("Use All Shrines",
            "Toggles the state of the Use All Shrines", function(state)
                Settings.Toggles.UseAllShrines = state
                stopUseAllShrinesLoop = not state
                if state then
                    coroutine.wrap(UseAllShrines)()
                end
            end)

        -- Creates the Sections for the Bosses Tab
        local Kraken = Bosses:NewSection("Kraken")
        local Slime = Bosses:NewSection("King Slime")

        -- Creates the Respawn Kraken Toggle
        local UIRespawnKrakenToggle = Kraken:NewToggle("Respawn Kraken", "Toggles the state of the Respawn Kraken",
            function(state)
                Settings.Toggles.RespawnKraken = state
                stopRespawnKrakenLoop = not state
                if state then
                    coroutine.wrap(RespawnKraken)()
                end
            end)

        -- Creates the Start Kraken Fight Toggle
        local UIStartKrakenToggle = Kraken:NewToggle("Start Kraken Fight", "Starts the Kraken fight", function(state)
            Settings.Toggles.StartKraken = state
            stopStartKrakenLoop = not state
            if state then
                coroutine.wrap(StartKraken)()
            end
        end)

        -- Creates the Kraken Level TextBox
        KrakenLevel = Kraken:NewTextBox("Kraken Level", "Enter the level of the Kraken",
            "Current Level: " .. Settings.Level.KrakenLevel, function(text)
                Settings.Level.KrakenLevel = tonumber(text)
                KrakenLevel:UpdatePlaceholder("Current Level: " .. Settings.Level.KrakenLevel)
            end)

        -- Creates the Respawn Slime Toggle
        local UIRespawnSlimeToggle = Slime:NewToggle("Respawn Slime", "Toggles the state of the Respawn Slime",
            function(state)
                Settings.Toggles.RespawnSlime = state
                stopRespawnSlimeLoop = not state
                if state then
                    coroutine.wrap(RespawnSlime)()
                end
            end)

        -- Creates the StartSlimeFight Toggle
        local UIStartSlimeToggle = Slime:NewToggle("Start Slime Fight", "Starts the Slime fight", function(state)
            Settings.Toggles.StartSlime = state
            stopStartSlimeLoop = not state
            if state then
                coroutine.wrap(StartSlime)()
            end
        end)

        -- Creates the Slime Level TextBox
        SlimeLevel = Slime:NewTextBox("Slime Level", "Enter the level of the King Slime",
            "Current Level: " .. Settings.Level.SlimeLevel, function(text)
                Settings.Level.SlimeLevel = tonumber(text)
                SlimeLevel:UpdatePlaceholder("Current Level: " .. Settings.Level.SlimeLevel)
            end)

        -- Creates the Sections for the Teleports Tab
        local BossTeleports = Teleports:NewSection("Boss Teleports")
        local NPCTeleports = Teleports:NewSection("NPC Teleports")
        local ZoneTeleports = Teleports:NewSection("Zone Teleports")
        local InteractionTeleports = Teleports:NewSection("Interaction Teleports")

        createTeleportButtons(BossTeleports, teleportLocations.BossTeleports)
        createTeleportButtons(NPCTeleports, teleportLocations.NPCTeleports)
        createTeleportButtons(ZoneTeleports, teleportLocations.ZoneTeleports)
        createTeleportButtons(InteractionTeleports, teleportLocations.InteractionTeleports)

        -- Creates the Sections for the Quests Tab
        local AutoQuests = Quests:NewSection("Auto Quests")

        -- Creates the Buttons for the Auto Quests Section
        AutoQuests:NewButton("GatoHub Auto Strange Quests", "Auto Strange Quests by Gato Hub", function()
            local AutoStrange = "https://raw.githubusercontent.com/Catto-YFCN/GatoHub/main/Quests/GatoHub_AutoStrange"
            loadstring(game:HttpGet(AutoStrange))()
        end)
        AutoQuests:NewButton("GatoHub Auto Bruh Quests", "Auto Bruh Quests by Gato Hub", function()
            local AutoBruh = "https://raw.githubusercontent.com/Catto-YFCN/GatoHub/main/Quests/GatoHub_AutoBruh"
            loadstring(game:HttpGet(AutoBruh))()
        end)

        AutoQuests:NewButton("GatoHub Auto Sailor Quests", "Auto Sailor Quests by Gato Hub", function()
            local AutoSailor = "https://raw.githubusercontent.com/Catto-YFCN/GatoHub/main/Quests/GatoHub_AutoSailor"
            loadstring(game:HttpGet(AutoSailor))()
        end)

        -- Creates the Sections for the Hubs Tab
        local ScriptHubs = Hubs:NewSection("Script Hubs")

        -- Creates the Buttons for the Script Hubs Section
        ScriptHubs:NewButton("Huge Games Hub", "Opens the Huge Games Hub", function()
            local HugeGamesHub = "https://api.luarmor.net/files/v3/loaders/f38c17c4a5e9f38a7dac14ce0940688d.lua"
            loadstring(game:HttpGet(HugeGamesHub))()
        end)

        ScriptHubs:NewButton("Gato Hub", "Opens the Gato Hub", function()
            local GatoHub = "https://raw.githubusercontent.com/Catto-YFCN/GatoHub/main/PetCatchers"
            loadstring(game:HttpGet(GatoHub))()
        end)

        ScriptHubs:NewButton("Lenut Hub", "Opens the Lenut Hub", function()
            local LenutHub = "https://raw.githubusercontent.com/lenutjr/pc/main/petcatchers"
            loadstring(game:HttpGet(LenutHub))()
        end)

        if PlayerId == Settings.DeveloperIds.Av or PlayerId == Settings.DeveloperIds.Hari then
            -- Creates the Sections for the Developer Tab
            local Developer = Window:NewTab("Developer")

            -- Creates the Sections for the Developer Tab
            local DeveloperTools = Developer:NewSection("Developer Tools")

            -- Creates the Buttons for the Developer Section
            DeveloperTools:NewButton("Infinite Yield", "Opens Infinite Yield", function()
                local InfiniteYield = "https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"
                loadstring(game:HttpGet(InfiniteYield))()
            end)

            DeveloperTools:NewButton("Remote Spy", "Opens Simple Remote Spy", function()
                local RemoteSpy = "https://raw.githubusercontent.com/infyiff/backup/main/SimpleSpyV3/main.lua"
                loadstring(game:HttpGet(RemoteSpy))()
            end)

            DeveloperTools:NewButton("Join Public Server", "Joins a public server", function()
                JoinPublicServer()
            end)

            DeveloperTools:NewButton("Rejoin Game", "Rejoins the game", function()
                RejoinServer()
            end)

            DestroyButton = DeveloperTools:NewButton("Destroy Script", "Destroys the script and gui", function()
                DestroyButton:DestroyGui()
                PetCatchersHub:stop()
            end)

            -- Creates the Sections for the Misc Tab
            local Keybinds = Misc:NewSection("Keybinds")
            local Others = Misc:NewSection("Others")

            -- Creates the keybind to toggle the UI
            Keybinds:NewKeybind("Select Keybind to toggle the UI", "Hides/shows the UI", Settings.Keybinds.ToggleUi,
                function()
                    Library:ToggleUI(HasInitialized)
                end)

            -- Creates the Buttons for the Misc Section
            Others:NewButton("Join Public Server", "Joins a public server", function()
                JoinPublicServer()
            end)

            Others:NewButton("Rejoin Game", "Rejoins the game", function()
                RejoinServer()
            end)

            Others:NewButton("Destroy Script", "Destroys the script and gui", function()
                DestroyButton:DestroyGui()
                PetCatchersHub:stop()
            end)
            wait(0.5)
            print("Done creating gui")
            wait(0.5)
        end
    else
        warn("PetCatchersHub has not been initialized")
    end
end

function PetCatchersHub:stop()
    print("Stopping PetCatchersHub...")
    wait(0.5)
    print("Disabling toggles...")
    wait(0.5)
    Settings.Toggles.ScriptEnabled = false
    Settings.Toggles.BuyAuburnShop = false
    Settings.Toggles.BuyBlackMarket = false
    Settings.Toggles.BuyGemTrader = false
    Settings.Toggles.BuyMagicShop = false
    Settings.Toggles.RespawnKraken = false
    Settings.Toggles.RespawnSlime = false
    Settings.Toggles.StartKraken = false
    Settings.Toggles.StartSlime = false
    Settings.Toggles.UseAllShrines = false
    print("Stopping loops...")
    wait(0.5)
    stopRespawnKrakenLoop = false
    stopRespawnSlimeLoop = false
    stopStartKrakenLoop = false
    stopStartSlimeLoop = false
    stopBuyBlackMarketLoop = false
    stopBuyMagicShopLoop = false
    stopBuyGemTraderLoop = false
    stopBuyAuburnShopLoop = false
    stopUseAllShrinesLoop = false
    print("Deinitializing...")
    wait(0.5)
    HasInitialized = false
    print("Stopped PetCatchersHub")
end

PetCatchersHub:init()
PetCatchersHub:gui()
print("PetCatchersHub is ready\n")
